//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//
//     Zmiany w tym pliku mogą spowodować niewłaściwe zachowanie i zostaną utracone
//     w przypadku ponownego wygenerowania kodu.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StreamerService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StreamerService.IStreamerService")]
    public interface IStreamerService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamerService/GetStream", ReplyAction="http://tempuri.org/IStreamerService/GetStreamResponse")]
        System.IO.Stream GetStream(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamerService/GetStream", ReplyAction="http://tempuri.org/IStreamerService/GetStreamResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamerService/UploadStream", ReplyAction="http://tempuri.org/IStreamerService/UploadStreamResponse")]
        bool UploadStream(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamerService/UploadStream", ReplyAction="http://tempuri.org/IStreamerService/UploadStreamResponse")]
        System.Threading.Tasks.Task<bool> UploadStreamAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamerService/EchoStream", ReplyAction="http://tempuri.org/IStreamerService/EchoStreamResponse")]
        System.IO.Stream EchoStream(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamerService/EchoStream", ReplyAction="http://tempuri.org/IStreamerService/EchoStreamResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> EchoStreamAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamerService/GetReversedStream", ReplyAction="http://tempuri.org/IStreamerService/GetReversedStreamResponse")]
        System.IO.Stream GetReversedStream();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamerService/GetReversedStream", ReplyAction="http://tempuri.org/IStreamerService/GetReversedStreamResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetReversedStreamAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamerService/GetFilms", ReplyAction="http://tempuri.org/IStreamerService/GetFilmsResponse")]
        string[] GetFilms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamerService/GetFilms", ReplyAction="http://tempuri.org/IStreamerService/GetFilmsResponse")]
        System.Threading.Tasks.Task<string[]> GetFilmsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamerService/GetFilmLen", ReplyAction="http://tempuri.org/IStreamerService/GetFilmLenResponse")]
        double GetFilmLen(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreamerService/GetFilmLen", ReplyAction="http://tempuri.org/IStreamerService/GetFilmLenResponse")]
        System.Threading.Tasks.Task<double> GetFilmLenAsync(string data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IStreamerServiceChannel : StreamerService.IStreamerService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class StreamerServiceClient : System.ServiceModel.ClientBase<StreamerService.IStreamerService>, StreamerService.IStreamerService
    {
        
        /// <summary>
        /// Wdróż tę metodę częściową, aby skonfigurować punkt końcowy usługi.
        /// </summary>
        /// <param name="serviceEndpoint">Punkt końcowy do skonfigurowania</param>
        /// <param name="clientCredentials">Poświadczenia klienta</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public StreamerServiceClient() : 
                base(StreamerServiceClient.GetDefaultBinding(), StreamerServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IStreamerService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StreamerServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(StreamerServiceClient.GetBindingForEndpoint(endpointConfiguration), StreamerServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StreamerServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(StreamerServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StreamerServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(StreamerServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StreamerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.IO.Stream GetStream(string data)
        {
            return base.Channel.GetStream(data);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync(string data)
        {
            return base.Channel.GetStreamAsync(data);
        }
        
        public bool UploadStream(System.IO.Stream stream)
        {
            return base.Channel.UploadStream(stream);
        }
        
        public System.Threading.Tasks.Task<bool> UploadStreamAsync(System.IO.Stream stream)
        {
            return base.Channel.UploadStreamAsync(stream);
        }
        
        public System.IO.Stream EchoStream(System.IO.Stream stream)
        {
            return base.Channel.EchoStream(stream);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> EchoStreamAsync(System.IO.Stream stream)
        {
            return base.Channel.EchoStreamAsync(stream);
        }
        
        public System.IO.Stream GetReversedStream()
        {
            return base.Channel.GetReversedStream();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetReversedStreamAsync()
        {
            return base.Channel.GetReversedStreamAsync();
        }
        
        public string[] GetFilms()
        {
            return base.Channel.GetFilms();
        }
        
        public System.Threading.Tasks.Task<string[]> GetFilmsAsync()
        {
            return base.Channel.GetFilmsAsync();
        }
        
        public double GetFilmLen(string data)
        {
            return base.Channel.GetFilmLen(data);
        }
        
        public System.Threading.Tasks.Task<double> GetFilmLenAsync(string data)
        {
            return base.Channel.GetFilmLenAsync(data);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IStreamerService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Nie można znaleźć punktu końcowego o nazwie „{0}”.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IStreamerService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8080/StreamerService");
            }
            throw new System.InvalidOperationException(string.Format("Nie można znaleźć punktu końcowego o nazwie „{0}”.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return StreamerServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IStreamerService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return StreamerServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IStreamerService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IStreamerService,
        }
    }
}
